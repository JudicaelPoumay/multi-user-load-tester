#Author : Judicael Poumay
#Contact : Judicael.Poumay@belfius.be
#Documentation : https://confluence.belwired.net:8443/spaces/00013130D/pages/253957254/AKS+API+4.+The+all-in-one+pipeline

trigger: none

parameters:
  - name: environment
    displayName: "Environment"
    type: string
    values:
      - "gtu"
      - "tst"
      - "uat"
      - "ptp"
      - "prd"
      - "trainprd"
    default: "gtu"
  - name: region
    displayName: "Deploy to region"
    type: string
    values:
      - "westeurope"
      - "northeurope"
    default: "westeurope"
  - name: istiotype
    displayName: "istio type"
    type: string
    values:
      - "backend"
      - "frontend"
    default: "backend"
  - name: installCertificates
    displayName: "install TLS Certificates (Optional)"
    type: boolean
    default: true
  - name: apiversion
    displayName: "api version (e.g. 1.0.3)"
    type: string
  
  - name: SetupIstio
    displayName: "Setup Istio (usually done once)"
    type: boolean
    default: true
  - name: CreateServicePrincipal
    displayName: "Create SP (usually done once)"
    type: boolean
    default: true
  - name: UpdateServicePrincipal
    displayName: "Update SP (usually done once)"
    type: boolean
    default: true
  - name: deployConfigMap
    displayName: "Deploy configmap"
    type: boolean
    default: true
  - name: deployApp
    displayName: "Deploy AKS"
    type: boolean
    default: true
  - name: APIRegistration
    displayName: "Register API (relevant for API only; requires Deploy AKS to be True)"
    type: boolean
    default: true

pool:
  name: self-hosted-vmss-ubuntu-prd-we

variables:
  - template: ${{ format('../variables/default_variables_{0}.yml', lower(parameters.environment)) }}
  - name: apilongversion
    value: ${{ parameters.apiversion }}
  - name: "shortRegion"
    ${{ if ne(parameters.region, 'northeurope') }}:
      value: "we"
    ${{ if eq(parameters.region, 'northeurope') }}:
      value: "ne"
    

resources:
  containers:
    - container: ccoe-product
      image: ${{variables.agentContainerImage}}
      endpoint: sc-acr-tooling-prod-${{ variables.applicationCode }}
  repositories:
    - repository: devops-template
      type: git
      name: geai/devops-template


stages:
  - stage: IstioConfigTrafficRouting
    displayName: "Istio configuration - traffic routing"
    condition: eq('${{ parameters.SetupIstio }}', 'true')
    jobs:
      - template: pipeline_templates/jobs_iac_istioConfig_trafficRoutingConfig_create.yml@devops-template
        parameters:
          azureSubscription: ${{ variables.azureSubscription }}
          aksClusterName: ${{ variables.aksClusterName }}
          appName: ${{ variables.appName }}
          applicationCode: ${{ variables.applicationCode }}
          appRegistrationPurpose: ${{ variables.appRegistrationPurpose }}
          appServicePort: ${{ variables.destinationPort }}



  - stage: setupIstioCertificate
    displayName: "Istio configuration - traffic routing"
    condition: and(eq('${{ parameters.installCertificates }}', 'true'),eq('${{ parameters.SetupIstio }}', 'true'))
    jobs:
      - template: pipeline_templates/jobs_iac_istioConfig_ingressConfig_create-0_2.yml@devops-template
        parameters:
          azureSubscription: ${{ variables.azureSubscription }}
          keyVaultName: ${{ variables.keyvaultKubernetes }}
          ingressServiceType:  ${{ parameters.istiotype }}
          applicationOwnerDefl: "${{ variables.applicationCode }}"
          hostname: ${{ variables.ingressHostname }}
          applicationNamespace: ${{ variables.applicationCode }}
          applicationName: ${{ variables.appRegistrationPurpose }}
          azureCluster: ${{ variables.aksClusterName }}
          ingressHostname: ${{ variables.ingressHostname }}
          appServicePort: ${{ variables.appServicePort }}
          tlsCert: ${{variables.ingressTlsCert}}
          tlsKey: ${{variables.ingressTlsKey}}
          destinations: ${{ variables.httpRoutes }}


  - stage: IngressTrafficPeer
    displayName: "Istio configuration - traffic routing"
    condition: eq('${{ parameters.SetupIstio }}', 'true')
    jobs:
      - job: IngressTrafficPeer
        displayName: "set traffic peer"
        container: ccoe-product
        steps:
          - task: IstioConfiguration@3
            name: Configure_Traffic_peer
            inputs:
              azureSubscription: ${{ variables.azureSubscription }}
              action: configurePeerAuthentication
              aksName: ${{ variables.aksClusterName }}
              applicationName: ${{ variables.appRegistrationPurpose }}
              applicationNamespace: ${{ variables.applicationCode }}

  - stage: CreateAppRegistrationBackend
    condition: eq('${{ parameters.CreateServicePrincipal }}', 'true')
    displayName: 'Create App registration for frontend - backend part'
    pool:
      name: self-hosted-vmss-ubuntu-prd-${{ variables.shortRegion }}
    jobs:
      - template: pipeline_templates/jobs_iac_appRegistration_create_custom.yml@devops-template
        parameters:
          environment: ${{ variables.environment }}
          resourceGroupName: ${{ variables.resourceGroupName }}
          appName: '${{ variables.appName }}-be'
          keyVaultName: ${{ variables.keyvaultKubernetes }}
          azureSubscription: ${{ variables.azureSubscription }}
          applicationCode: ${{ variables.applicationCode }}
          clientApplicationName: ${{ variables.clientApplicationCode }}
          bFunction: ${{ variables.bFunction }}
          appLongName: ${{ variables.appLongName }}
          appRegistrationPurpose: '${{ variables.appName }}-be'
          setPassword: true
          identifierUris: 'api://${{variables.applicationCode}}-${{parameters.environment}}-${{variables.appName}}-be'
          claimsMappingPolicyAction: 'Enable'
          claimsMappingPolicyId: '278c84f8-6372-40f3-b38c-f4ebf763c693'
          redirectUris: ${{variables.appRegistrationFrontendRedirectUris}} 
          idToken: |
            {
                "idToken": [
                    {
                        "name": "xms_pl"
                    },
                    {
                        "name": "upn"
                    }
                ]
            }
          oauth2PermissionScopes: |
            {
              "oauth2PermissionScopes": [
                  {
                      "adminConsentDescription": "Default",
                      "adminConsentDisplayName": "Default",
                      "isEnabled": true,
                      "type": "Admin",
                      "userConsentDescription": null,
                      "userConsentDisplayName": null,
                      "value": "Default"
                  }
                ]
            }
          appRoles: ${{ variables.appRoles }}

  - stage: UpdateAppRegistrationWithoutAdminConsentBackend
    condition: eq('${{ parameters.UpdateServicePrincipal }}', 'true')
    dependsOn: CreateAppRegistrationBackend
    jobs:
      - template: pipeline_templates/jobs_iac_appRegistration_update.yml@devops-template
        parameters:
          environment: ${{ variables.environment }}
          azureSubscription: ${{ variables.azureSubscription }}
          requiredResourceAccess: ${{ variables.appRequiredResourceAccess }}
          appAid: ${{ variables.appAid }}
          purpose: ${{ variables.appName }}-be
          performAdminConsent: false

  - stage: DelayBackend
    condition: eq('${{ parameters.UpdateServicePrincipal }}', 'true')
    dependsOn: UpdateAppRegistrationWithoutAdminConsentBackend
    jobs:
      - job: DelayBackend
        pool: server
        steps:
          - task: Delay@1
            displayName: 'Wait 2 min before Performing Admin Consent'
            inputs:
              delayForMinutes: '2'

  - stage: UpdateAppRegistrationWithAdminConsentBackend
    condition: eq('${{ parameters.UpdateServicePrincipal }}', 'true')
    dependsOn: DelayBackend
    jobs:
      - template: pipeline_templates/jobs_iac_appRegistration_update.yml@devops-template
        parameters:
          environment: ${{ variables.environment }}
          azureSubscription: ${{ variables.azureSubscription }}
          requiredResourceAccess: ${{ variables.appRequiredResourceAccess }}
          appAid: ${{ variables.appAid }}
          purpose: ${{ variables.appName }}-be
          performAdminConsent: true

  - stage: DeployConfigMap
    displayName: Deploy ConfigMap to ${{ parameters.environment }}
    condition: eq('${{ parameters.deployConfigMap }}', 'true')
    dependsOn:
      - CreateAppRegistrationBackend
    jobs:
      - job: DeployConfigMap
        container: ccoe-product
        steps:
          - task: AzureKeyVault@1
            inputs:
              azureSubscription: ${{variables.azureSubscription}}
              KeyVaultName: ${{ variables.keyvaultKubernetes }}
              SecretsFilter: "clientid-${{variables.applicationCode}}-${{variables.environment}}-${{variables.appName}}-be,clientsecret-${{variables.applicationCode}}-${{variables.environment}}-${{variables.appName}}-be"
              RunAsPreJob: false
          - bash: |
              echo "##vso[task.setvariable variable=APPLICATION_ID]$(clientid-${{variables.applicationCode}}-${{variables.environment}}-${{variables.appName}}-be)"
              echo "##vso[task.setvariable variable=APPLICATION_SECRET]$(clientsecret-${{variables.applicationCode}}-${{variables.environment}}-${{variables.appName}}-be)"
          - task: replaceTokens@5
            displayName: "Prepare configmap"
            inputs:
              rootDirectory: $(Build.Repository.LocalPath)/devops/kubernetes
              verbosity: "detailed"
              writeBOM: true
              actionOnMissing: "fail"
              keepToken: true
              actionOnNoFiles: "fail"
              enableTransforms: false
              useLegacyPattern: false
              variableFiles: $(Build.Repository.LocalPath)/devops/variables/default_variables_${{parameters.environment}}.yml
              targetFiles: |
                configmap.yml.tpl => configmap.yml
          - task: KubernetesManifest@0
            displayName: Deploy Configmap
            inputs:
              kubernetesServiceConnection: "${{ variables.kubernetesServiceConnection }}"
              namespace: "${{ variables.applicationCode }}"
              manifests: "$(Build.Repository.LocalPath)/devops/kubernetes/configmap.yml"

  - stage: Build
    displayName: Build stage
    condition: eq('${{ parameters.deployApp }}', 'true')
    dependsOn:
    pool:
      name: self-hosted-vmss-ubuntu-prd-we
    jobs:
      - job: Build_app
        displayName: Build
        steps:
          - script: |
              echo '${{ variables.containerRegistry }}'
              echo '${{ variables.repository }}'
            displayName: Container and repository info
          - task: PipAuthenticate@1
            displayName: 'Pip Authenticate'
            inputs:
              artifactFeeds: 'Belfius-BizDevOps'
              onlyAddExtraIndex: True         
          - task: Docker@2
            displayName: Login to ACR
            inputs:
              command: login
              containerRegistry: ${{ variables.containerRegistry }}
          - script: |
              echo "##vso[task.setvariable variable=artifactoryUrl;]$PIP_EXTRA_INDEX_URL"
              docker pull ${{variables.containerRegistryUrl}}/${{ variables.repository }}:latest
              docker pull ${{variables.containerRegistryUrl}}/${{ variables.repository }}:build-stage
            displayName: 'Docker pull previous'
            continueOnError: true
          - task: Docker@2
            displayName: Build the build image
            inputs:
              command: build
              dockerfile: 'Dockerfile'
              repository: ${{ variables.repository }}
              tags: |
                build-stage
              arguments: "--secret id=PIP_INDEX_URL --target build-stage --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg ACR_URL=${{variables.containerRegistryUrl}} --cache-from=${{variables.containerRegistryUrl}}/${{ variables.repository }}:build-stage"
            env: 
              PIP_INDEX_URL: $(artifactoryUrl)
              DOCKER_BUILDKIT: 1
          - task: Docker@2
            displayName: Build the final image
            inputs:
              command: build
              dockerfile: 'Dockerfile'
              repository: ${{ variables.repository }}
              tags: |
                $(Build.BuildNumber)
                latest
              arguments: "--secret id=PIP_INDEX_URL --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg ACR_URL=${{variables.containerRegistryUrl}} --cache-from=${{variables.containerRegistryUrl}}/${{ variables.repository }}:build-stage --cache-from=${{variables.containerRegistryUrl}}/${{ variables.repository }}:latest"
            env: 
              PIP_INDEX_URL: $(artifactoryUrl)
              DOCKER_BUILDKIT: 1
          - task: Docker@2
            displayName: Push docker image
            inputs:
              command: push
              repository: ${{ variables.repository }}
              tags: |
                $(Build.BuildNumber)
                latest
          - task: Docker@2
            displayName: Push docker image
            inputs:
              command: push
              repository: ${{ variables.repository }}
              tags: |
                build-stage

  - stage: DeployApp
    displayName: Deploy to ${{ upper(parameters.environment) }}
    condition: eq('${{ parameters.deployApp }}', 'true')
    dependsOn:
      - Build
      - DeployConfigMap
    jobs:
      - job: DeployApplication
        container: ccoe-product
        displayName: Deploy to ${{ upper(parameters.environment) }} (${{ variables.shortRegion }})
        variables:
          - name: appVersion
            value: $(Build.BuildNumber)
        steps:
          - template: pipeline_templates/steps_cd_acr_dockerImage_promote.yml@devops-template
            parameters:
              azureProdSubscription: ${{ variables.azureGTUSubscription }}
              imageTag: $(appVersion)
              repositoryName: ${{ variables.repository }}
          - task: replaceTokens@5
            displayName: "Prepare deployment manifests, this should fail miserably"
            inputs:
              rootDirectory: $(Build.Repository.LocalPath)/devops/kubernetes
              verbosity: "detailed"
              writeBOM: true
              actionOnMissing: "fail"
              keepToken: true
              actionOnNoFiles: "fail"
              enableTransforms: false
              useLegacyPattern: false
              variableFiles: $(Build.Repository.LocalPath)/devops/variables/default_variables_${{parameters.environment}}.yml
              targetFiles: |
                simple-kb-deploy.yml.tpl => kb-deploy-main.yml
                service.yml.tpl => service.yml
                autoscaler.yml.tpl => autoscaler.yml

          - script: |
              echo "${{ variables.kubernetesContainer }}:$(appVersion)"
            displayName: Docker image to deploy
          - task: KubernetesManifest@0
            displayName: Deploy App
            inputs:
              kubernetesServiceConnection: "${{ variables.kubernetesServiceConnection }}"
              namespace: "${{ variables.applicationCode }}"
              containers: ${{ variables.kubernetesContainer }}:$(appVersion)
              manifests: "$(Build.Repository.LocalPath)/devops/kubernetes/*.yml"
      - template: pipeline_templates/jobs_ci_unit_repository_tag.yml@devops-template
        parameters:
          tag: $(Build.BuildNumber)

  - stage: DelayAPIRegistration
    condition: eq('${{ parameters.APIRegistration }}', 'true')
    dependsOn: DeployApp
    jobs:
      - job: DelayAPIRegistration
        pool: server
        steps:
          - task: Delay@1
            displayName: 'Wait 2 min before pod starts'
            inputs:
              delayForMinutes: '2'

  - stage: APIRegistration
    condition: eq('${{ parameters.APIRegistration }}', 'true')
    displayName: API Authorization Policy registration
    dependsOn: DelayAPIRegistration
    jobs:
      - job: UploadServiceInformation
        displayName: Upload service information
        variables:
          - name: appVersion
            value: $(Build.BuildNumber)
        steps:
          - task: replaceTokens@5
            displayName: "Prepare deployment manifests, this should fail miserably"
            inputs:
              rootDirectory: $(Build.Repository.LocalPath)/devops/docker
              verbosity: "detailed"
              writeBOM: true
              actionOnMissing: "fail"
              keepToken: true
              actionOnNoFiles: "fail"
              enableTransforms: false
              useLegacyPattern: false
              variableFiles: $(Build.Repository.LocalPath)/devops/variables/default_variables_${{parameters.environment}}.yml
              targetFiles: |
                api-info.json.tpl => api-info.json
          # Upload service information
          - task: PowerShell@2
            displayName: "Upload service information in the app registry"
            inputs:
              targetType: "inline"
              script: |
                $body = Get-Content -Path  $(System.DefaultWorkingDirectory)/devops/docker/api-info.json
                echo $body
                $url = "${{ variables.appRegistryURL }}/service-informations"
                $headers = @{
                      'x-api-version' = 'v${{ variables.appRegistryVersion }}';
                      'Accept' = '*/*';
                    }
                try {
                  $response = Invoke-RestMethod -Method 'POST' -Uri $url -Body $body -Headers $headers -ContentType "application/json" -SkipCertificateCheck
                } catch {
                  Write-Error "Got exception! Message: $($_.ErrorDetails.Message)"
                }
      - job: RegisterDeployment
        displayName: Register deployment
        dependsOn: UploadServiceInformation
        condition: succeeded()
        steps:
          # Register deploy on app registry
          
          - task: AzureKeyVault@1
            inputs:
              azureSubscription: ${{variables.azureSubscription}}
              KeyVaultName: ${{ variables.keyvaultKubernetes }}
              SecretsFilter: "clientid-${{variables.applicationCode}}-${{variables.environment}}-${{variables.appName}}-be"
              RunAsPreJob: false
          - bash: |
              echo "##vso[task.setvariable variable=APPLICATION_ID]$(clientid-${{variables.applicationCode}}-${{variables.environment}}-${{variables.appName}}-be)"
          - task: PowerShell@2
            displayName: "Register Deployment In The App Registry"
            inputs:
              targetType: "inline"
              script: |
                $env = "${{variables.environment}}".ToUpper()
                $body = @{
                    "applicationCode" = "${{ variables.applicationCode }}";
                    "identity" = @{
                    "servicePrincipalId" = "$(APPLICATION_ID)";
                    "servicePrincipalName" = "${{ variables.servicePrincipalName }}-be";
                    "appURI"="api://${{ variables.servicePrincipalName }}-be";
                    "environment"=$env
                    "issuer"="${{ variables.issuer }}"
                  };
                  "clusterName" = "${{ variables.aksClusterName }}";
                }
                echo $body
                $baseUrl = "${{ variables.appRegistryURL }}"
                $url = "$baseUrl/containers/${{ variables.appRegistrationPurpose}}/versions/$(Build.BuildNumber)/deployment?environment=$env"
                $headers = @{
                  'x-api-version' = 'v${{ variables.appRegistryVersion }}';
                  'Accept' = '*/*';
                }
                try {
                  $response = Invoke-RestMethod -Method 'POST' -Uri $url -Body ($body|ConvertTo-Json) -Headers $headers -ContentType "application/json" -SkipCertificateCheck
                } catch {
                  Write-Error "Got exception! Message: $($_.ErrorDetails.Message)"
                }
                echo "Successful. Response: $($response)"
          # App registry Succeeded
          - task: PowerShell@2
            displayName: "App registry notification - Deployment succeeded"
            condition: succeeded()
            inputs:
              targetType: "inline"
              script: |
                $body = @{
                     "applicationCode" = "${{ variables.applicationCode }}";
                     "status"="RUNNING";
                     "clusterName"="${{ variables.aksClusterName }}"
                }
                echo $body
                $baseUrl = "${{ variables.appRegistryURL }}"
                $env = "${{variables.environment}}".ToUpper()
                $url = "$baseUrl/containers/${{ variables.appRegistrationPurpose}}/versions/$(Build.BuildNumber)/status?environment=$env"
                $headers = @{
                  'x-api-version' = 'v${{ variables.appRegistryVersion }}';
                  'Accept' = '*/*';
                }
                try {
                  $response = Invoke-RestMethod -Method 'PUT' -Uri $url -Body ($body|ConvertTo-Json) -Headers $headers -ContentType "application/json" -SkipCertificateCheck
                } catch {
                  Write-Error "Got exception! Message: $($_.ErrorDetails.Message)"
                }
                echo "Successful. Response: $($response)"
          # App registry Failed
          - task: PowerShell@2
            displayName: "App registry notification - Deployment Failed"
            condition: failed()
            inputs:
              targetType: "inline"
              script: |
                $body = @{
                     "applicationCode" = "${{ variables.applicationCode }}";
                     "status"="FAILED";
                     "clusterName"="${{ variables.aksClusterName }}"
                }
                echo $body
                $baseUrl = "${{ variables.appRegistryURL }}"
                $env = "${{variables.environment}}".ToUpper()
                $url = "$baseUrl/containers/${{ variables.appRegistrationPurpose}}/versions/$(Build.BuildNumber)/status?environment=$env"
                $headers = @{
                  'x-api-version' = 'v${{ variables.appRegistryVersion }}';
                  'Accept' = '*/*';
                }
                try {
                  $response = Invoke-RestMethod -Method 'PUT' -Uri $url -Body ($body|ConvertTo-Json) -Headers $headers -ContentType "application/json" -SkipCertificateCheck
                } catch {
                  Write-Error "Got exception! Message: $($_.ErrorDetails.Message)"
                }
                echo "Failed. Response: $($response)"
