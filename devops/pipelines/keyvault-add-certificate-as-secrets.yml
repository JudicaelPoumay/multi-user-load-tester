trigger: none

parameters:
  - name: environment
    displayName: 'Environment'
    type: string
    values:
      - 'tst'
      - 'gtu'
      - 'uat'
      - 'ptp'
      - 'prd'
      - 'trainprd'
    default: 'tst'
  - name: certificateFileName
    displayName: 'Name of the certificate file'
    type: string
  - name: keyName
    displayName: 'Name of the secret holding the key'
    type: string
  - name: certificateName
    displayName: 'Name of the secret holding the certificate'
    type: string
  - name: mergeCertificate
    displayName: 'Merge certificate'
    type: boolean
    default: 'false'
  - name: region
    displayName: 'Deploy to region'
    type: string
    values:
      - 'westeurope'
      - 'northeurope'
    default: 'westeurope'

variables:
  - template: ../variables/default_variables_${{ parameters.environment }}.yml
    parameters:
      region: ${{ parameters.region }}
  - name: 'shortRegion'
    ${{ if ne(parameters.region, 'northeurope') }}:
      value: 'we'
    ${{ if eq(parameters.region, 'northeurope') }}:
      value: 'ne'

resources:
  containers:
    - container: infra
      image: belfius/gemz/ccoe-product:release-1.4.0
      endpoint: sc-acr-tooling-prod-${{ variables.applicationCode }}
  repositories:
    - repository: devops-template
      type: git
      name: geai/devops-template     

jobs:
  - job: MergeCertificate
    condition: eq('${{ parameters.mergeCertificate }}', 'true')
    pool:
      name: self-hosted-vmss-ubuntu-prd-${{ variables.shortRegion }}
    container: infra
    steps:
      - checkout: none
      - task: DownloadSecureFile@1
        name: certificateFile
        displayName: 'Download certificate file'
        inputs:
          secureFile: '${{ parameters.certificateFileName }}.cer'
      - task: KeyVault@1
        displayName: 'KeyVault Import Cert'
        inputs:
          azureSubscription: ${{ variables.azureSubscription }}
          action: 'importCertificate'
          keyVaultName: ${{ variables.keyvaultKubernetes }}
          certificateName: ${{ parameters.certificateFileName }}
          certificateFile: $(certificateFile.secureFilePath)
          certificateFilePassword: 'notused'

  - job: AddCertificatesAsSecrets
    dependsOn: MergeCertificate
    condition: or(succeeded(), eq('${{ parameters.mergeCertificate }}', 'false')) # It will be executed if MergeCertificate is succeeded or skipped
    pool:
      name: self-hosted-vmss-ubuntu-prd-${{ variables.shortRegion }}
    container: infra
    steps:
      - checkout: none
      - task: AzureKeyVault@1
        displayName: 'Retrieve Certificate from KeyVault'
        inputs:
          azureSubscription:  ${{ variables.azureSubscription }}
          KeyVaultName: ${{ variables.keyvaultKubernetes }}
          SecretsFilter:  ${{ parameters.certificateFileName }}
          RunAsPreJob: false

      - bash: |
          echo $(${{ parameters.certificateFileName }}) > ${{ parameters.certificateFileName }}.txt
          base64 -d ${{ parameters.certificateFileName }}.txt > ${{ parameters.certificateFileName }}.pfx
          
          echo Extracting Key from PFX file...
          openssl pkcs12 -in ${{ parameters.certificateFileName }}.pfx -nocerts -out ${{ parameters.certificateFileName }}_key.pem -password pass: -passout pass:temp
          openssl rsa -in ${{ parameters.certificateFileName }}_key.pem -out ${{ parameters.certificateFileName }}_key_nopass.pem -passin pass:temp
          echo Base64 value of key
          echo "##vso[task.setvariable variable=keyBase64]$(openssl base64 -A -in ${{ parameters.certificateFileName }}_key_nopass.pem)"
          echo Extracting Certificate from PFX file...
          openssl pkcs12 -in ${{ parameters.certificateFileName }}.pfx -clcerts -nokeys -out ${{ parameters.certificateFileName }}_cert.pem -password pass:
          echo Base64 value of certificate
          echo "##vso[task.setvariable variable=certBase64]$(openssl base64 -A -in ${{ parameters.certificateFileName }}_cert.pem)"

      - task: KeyVault@1
        displayName: 'pem-belfius-bank-infra-ca-services-base64'
        inputs:
          azureSubscription: ${{ variables.azureSubscription }}
          action: 'setSecret'
          keyVaultName: ${{ variables.keyvaultKubernetes }}
          secretName: 'pem-belfius-bank-infra-ca-services-base64'
          secretValue: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVwekNDQTQrZ0F3SUJBZ0lMQkFBQUFBQUJUcEhCekRJd0RRWUpLb1pJaHZjTkFRRUxCUUF3Y3pFTE1Ba0cKQTFVRUJoTUNRa1V4S1RBbkJnTlZCQW9USUVsdWJtOTJZWFJwZG1VZ1UyOXNkWFJwYjI1eklHWnZjaUJHYVc1aApibU5sTVRrd053WURWUVFERXpCSmJtNXZkbUYwYVhabElGTnZiSFYwYVc5dWN5Qm1iM0lnUm1sdVlXNWpaU0JTCmIyOTBJRU5CSUZObGNuWnBZMlV3SGhjTk1UVXdOekUxTVRBd01EQXdXaGNOTWpVd056RTFNVEF3TURBd1dqQmgKTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEYm1WME1SZ3dGZ1lLQ1pJbWlaUHlMR1FCR1JZSVltVnNkMmx5WldReApNREF1QmdOVkJBTVRKMEpsYkdacGRYTWdRbUZ1YXlCSmJtWnlZWE4wY25WamRIVnlaU0JEUVNCVFpYSjJhV05sCmN6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5Oc2VEaXJzZjhDNVYxNlZDbTkKWXZsMUdWSXN3eEdQUTBZZUFLK1NuNVlrWlVFLzl0VS80T2svdDRrSzRHUC9vYmhOMUk3M0tSVkxhREMxU0RLMgpLeXNFRkl6TG1tK2lWUHdicmZxZmJMRFIwM1lwSjBLbmVCRXdTR3FkZGE4QmtScmVIckg5R1hkb2pRcnN6OFJFCjRFeUs1R2JpNGVrUFZMZXVCanRtUXc0UEswYmdqOVQwVW5tMGkwTXZxb2JIWkRFVXh1V2U4S3ZzM2hlMEY0NnMKbkZOMHVaTGd3dGl3ekk0aDdYcE91S3FORHV2dlg2bnpaSHpOaklJUVo1K0I1a0Q0aVJRbUkvZlJBUG0xYjFxUgowWkpVSDhsRHc5TGFvckQvUzZDenhlYXlrdHFhRFNuTyt1L3dWT0h6YUtQbmdTd01XMGQ2d3ZoMi9UaVYvZnZwCm1sMENBd0VBQWFPQ0FVd3dnZ0ZJTUE0R0ExVWREd0VCL3dRRUF3SUJCakFTQmdOVkhSTUJBZjhFQ0RBR0FRSC8KQWdFQU1CMEdBMVVkRGdRV0JCUmxRZER3Y0dwZUhmaktlZm13Vm90L05KS2YyekJoQmdOVkhTQUVXakJZTUZZRwpEaXNHQVFRQnYySUJBd0lCQ2dFQU1FUXdRZ1lJS3dZQkJRVUhBZ0l3TmhvMGFIUjBjSE02THk5eWIyOTBMa2xUCk5FWndhMmx6WlhKMmFXTmxjeTVqYjIwdlNWTTBSbDlTYjI5MFEwRmZRMUJUTG5Ca1pqQTVCZ05WSFI4RU1qQXcKTUM2Z0xLQXFoaWhvZEhSd09pOHZjR3RwTG1KbGJIZHBjbVZrTG01bGRDOUpVelJHWDFKdmIzUmZRMEV1WTNKcwpNRVFHQ0NzR0FRVUZCd0VCQkRnd05qQTBCZ2dyQmdFRkJRY3dBb1lvYUhSMGNEb3ZMM0JyYVM1aVpXeDNhWEpsClpDNXVaWFF2U1ZNMFJsOVNiMjkwWDBOQkxtTnlkREFmQmdOVkhTTUVHREFXZ0JSTENjV0RZN2s5VkZ3YllLSW8KK1JwdEQvZ2ZIREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBREVrM1ZTWTJWY2ZON1pCakpBUVJpSmc1V2wwNAplUHcxUU4wK0ppODBwZVBtQ1diWm8yMjJOa0cvWmNMcHBMWjhBc3NmNmpqZm5teDA2RFRNem9IZHR0bk1ZaEhQCnJzTUVDMnJFQmVVL3FBOTRjdXNQdlVIOWhJckV6ZlM2S3BPdm5BbHBpNjM0TzEvSng2TXZ2aUY2WlBhQkc3NWsKNkpaa3Nva3hTbm4wZDgyUy9vSS84UXlocFZQRmZ3cVNTK2hYWXloaGlUUmYxYXNjRWRmejZITDg2WU1WNlJicwp2djhnSWhxOXI2bk1yZTkyd2REVDVCa1phd0R0cTViQU8zZ3Rycmp1cDhaakhVNG5hTzl6c1NoZ2pRTzArZ2ViCkJYR2RvWWphU044VkRkYmRzY2tHcVJ3N2o1WEpSc2g1U1NpVjJQSXZYSnFFbXB5eWJCZFZLcmx2Q3c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=='

      - task: KeyVault@1
        displayName: 'pem-belfius-root-ca-service-base64'
        inputs:
          azureSubscription: ${{ variables.azureSubscription }}
          action: 'setSecret'
          keyVaultName: ${{ variables.keyvaultKubernetes }}
          secretName: 'pem-belfius-root-ca-service-base64'
          secretValue: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdqVENDQkhXZ0F3SUJBZ0lMQkFBQUFBQUJjTDdHdXZFd0RRWUpLb1pJaHZjTkFRRUxCUUF3UVRFZ01CNEcKQTFVRUF3d1hRa1ZNUmtsVlUxOVNiMjkwWDBOQlgxTmxjblpwWTJVeEVEQU9CZ05WQkFvVEIwSkZURVpKVlZNeApDekFKQmdOVkJBWVRBa0pGTUI0WERUSXdNRE13T1RFd01EQXdNRm9YRFRRMU1ETXdPVEV3TURBd01Gb3dRVEVnCk1CNEdBMVVFQXd3WFFrVk1Sa2xWVTE5U2IyOTBYME5CWDFObGNuWnBZMlV4RURBT0JnTlZCQW9UQjBKRlRFWkoKVlZNeEN6QUpCZ05WQkFZVEFrSkZNSUlDSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQQozcjNoZy9mR1JOZ3YybzNld1RNZ3BWQVV0NU5ialFSQUkrZXcyY2RONU05T2pGMFU3MkFMc3V0aHpFUEdVdGl3CnpjeU1zdnNvSXlWaXcwaVpGcTgzZzlVRDZBcHhrL3ZXWEU1TWZuZ25sOTB0ckswQWFRdUJNb01xcUkwTGZ5QzYKSGk3aVNnSE1tSFFwMDdXNk11WDdIYzQrTTIvTXRKeG5YZmwrRjE2VVhUVXBSRnZtREVrVVN4ai9iTkVaWlBPQQpDcCsxU1YwRXRkMW03YU8vV0gyUlIvSGdPY0IzUW12N0dxd1oxNkZpSUlRbU1Dd3BWZS9TVjZTK3o3cUUyTkdCCmVnTjRzeVNTN0ZWanJjbEpVMmRQdW81aHN3bEpwRnhRUFMyM1UvUmZGczZNd0YydmdsQm9GaUtpZ3RHVDFYMUMKUk1aL1QybXQzSFo5N1pBd0J2U3U3SkFReE03amJsa0FqMEFsdVh5aE1YTU14OE9uQVNRWGdORUlmbE01K1ljaQorNzBnVmpKOXAzQTBoQmZzVDdkbk4vTlZLQk9KZFZjaGxOVjdqM3hpd25KKzJaL0J1V1ZRNHNJSUdTdVVVTkIrClI4OFk4ZXFmbUNvVXAvdSttT2JrdDZpaHZXY1k5NnBsRHNLWk1ZQUJ3bzQ5YW5YY1I3WXJWQjE1UzNWQUw0Z1UKV2o5M0UwL2lGSm56WjV2ZHhuaVRrdUhQYjVodmxpbEg0RW9jYjFOb2xKY3VDakdQK3I5Vlp6a2dMaTFzQ3hXTgo0Y2VBaEFiS0ViYUdyZEtBb3lHZ1VIUXljdjBIeUtUMFJHckNtRlJyUnlzeHNyblR3dm8yeGZXMTBDSEJmRHNnCmlWRm5CUTlEMy9mZkNWaVJmZEpzRU5kYkZEQU1BMVptY0YrSjVvelJIS2tDQXdFQUFhT0NBWVF3Z2dHQU1BNEcKQTFVZER3RUIvd1FFQXdJQkJqQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUJNSUlCT1FZRFZSMGdCSUlCTURDQwpBU3d3Z2dFb0Jnb3JCZ0VFQVlLQkJtVURNSUlCR0RCREJnZ3JCZ0VGQlFjQ0FSWTNhSFIwY0RvdkwwSkZURVpKClZWTmZVRXRKTGtKRlRGZEpVa1ZFTGs1RlZDOUNaV3htYVhWelgxSnZiM1JmUTBGZlExQlRMbkJrWmpCSEJnZ3IKQmdFRkJRY0NBUlk3YUhSMGNEb3ZMMEpGVEVaSlZWTmZVRXRKTGxSVFZDNUNSVXhYU1ZKRlJDNU9SVlF2UW1WcwpabWwxYzE5U2IyOTBYME5CWDBOUVV5NXdaR1l3UVFZSUt3WUJCUVVIQWdFV05XaDBkSEE2THk5Q1JVeEpUbE5mClVFdEpMa1JXVTFsVExrUldMa0pGTDBKbGJHWnBkWE5mVW05dmRGOURRVjlEVUZNdWNHUm1NRVVHQ0NzR0FRVUYKQndJQkZqbG9kSFJ3T2k4dlFrVk1TVTVUWDFCTFNTNVVVMVF1UkZaVFdWTXVSRll1UWtVdlFtVnNabWwxYzE5UwpiMjkwWDBOQlgwTlFVeTV3WkdZd0hRWURWUjBPQkJZRUZFSFFoVkx3YXliN2FiNUloYm42QlA0UFBObm9NQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElDQVFBT2M2Z2N3UDRLVVkwVDJ5Y09hL1lZNWZuV1FhYnhwV2xzbDJJOURkM08KWDVueHpMSVFkWFFCd2VjOHVrSHkxengyUGFDTytpZVg1d3cweTRqRUt6bmtqcmNTVHNoU1lJbTFBTi96U3Q5UQp3VzFJR0kxSjlkNk43aUhxMDUrMml6OE1COTIrbVZkWENjZDhEamFPNG56SE5EclBtT1F2S0FVNXlLTStpc2FRCktUQ1NneGtPRUZLci8ycjVpRytWR2ZHT1F3RGUyVkNCU3JPUmt1Tjg2VDlCOHkvTWE3NFQxNHBHRG80TXU4UU0KdERtaXB5Z0dmWE8xSGlIU2p0OG5PMGMwT3plajhORnh5UkdYZTFDdWhyZ3BQNWN1YXNNN1RDNmpyODBIQjNjdwptZXFrazVMMGpodEhjMkhBV2toUlRwUm56UlM2WXhoUzBoTmJBNHZOaHlJeE9DVnJYNmhSRE45WEErZEdMV0lMClRXNXM5NkU1T2ZVcnh6clBFckl4VUdjT1ptNFc1ZlN3NEtuM25udmI4WDFramkwMVZkd2JhRXVBY1R4aVM4MEcKVUZhd1VHYlhWZjRLejRteFVzVjVCU2ZDbVdPdWVmZTUvT0VNTGthQVZENDhZUytBSUxNQXAzSkx6U3pnN3RTWQovaEJzYzBWelk1c0trcW1VRWtYNWg0bjV5MGhsbkFmRWptSGRCTXc5am1qY1pqOFBZZjE3alN0T3prRzVhc0RKCkhIVmRrajUzWUx5WFVhSy9ETXhjMTZXZExDcko3UENaOVFBQURWMktWZlQvcjJKWHlvWEpkVlhEcTdWenlVYnoKL1BUVE1UbXRqVHNiU0dHSWJFN2IwSWduMU1GQjlJVEIzU3hZNHE0cGtZVXJKNUpUaFpSRi9NQW1rQmJ2QUMyTApFdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0='

      - task: KeyVault@1
        displayName: 'pem-belfius-dedicated-prod-issuing-ca-base64'
        inputs:
          azureSubscription: ${{ variables.azureSubscription }}
          action: 'setSecret'
          keyVaultName: ${{ variables.keyvaultKubernetes }}
          secretName: 'pem-belfius-dedicated-prod-issuing-ca-base64'
          secretValue: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdnekNDQkd1Z0F3SUJBZ0lMQkFBQUFBQUJjTDdTOGxFd0RRWUpLb1pJaHZjTkFRRUxCUUF3UVRFZ01CNEcKQTFVRUF3d1hRa1ZNUmtsVlUxOVNiMjkwWDBOQlgxTmxjblpwWTJVeEVEQU9CZ05WQkFvVEIwSkZURVpKVlZNeApDekFKQmdOVkJBWVRBa0pGTUI0WERUSXdNRE13T1RFeE1EQXdNRm9YRFRNd01ETXdPVEV4TURBd01Gb3dXekVUCk1CRUdDZ21TSm9tVDhpeGtBUmtXQTI1bGRERVlNQllHQ2dtU0pvbVQ4aXhrQVJrV0NHSmxiSGRwY21Wa01Tb3cKS0FZRFZRUURFeUZDWld4bWFYVnpJRVJsWkdsallYUmxaQ0JRY205a0lFbHpjM1ZwYm1jZ1EwRXdnZ0lpTUEwRwpDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRRG9OancvOVBFVGN1cTVrSVFhUFN5cFh1bms4bm11CjFaMHJseU1zUkZhY0lkRnVLaE1oRktoWEJjZktONk5aNHRERlNlK0dGS21WYXpnZThMTFpIcW9EUzZ2b20ycWwKdTgwY1Y0QVFwOG5ycyt5bE9BWHYzZk1VL3NOVzgwRkdPNjRJOVFsVlVuL2hlSGk2OE4rVnJ0dC9oWXRVR3Q3QgptSU5ycnBsYzdpU3BSMVpBTGVGbnczUTJMaGV1Z0lSM0svdlRJZzB1QThBeGI5TUREeHVpSzNlZzVVVjJXLy9HCmhzMWlLZmFIeXdNZk5HanVFQmc0ZjVuaGd3NUlpNklHTzlTT0t2enV6cU9mOFAvNDZPRnk3VkkyOW45b01nUU0Kd1JjbS9aNjM3OFNXNUVrTU1hdjl4WGloY2t1T0JNankwYTl4VGc0Y3JuRWM5MlprZ2Q0c0NNSWVzcERnNXRZbwpRU2gyb1pwbGlXR3RXaUZyZnFDLzZGY2NBUTBLNVpZZnRoaTdURlRBamdrdHc5ZG4rTnROejhhMWdGYzk3ZkEvCmUvcEg5ZXBmMThDNjU0YW9vWmxnNVFXbVRIYzMvbkpUNlhIeUVQQjV3MW5oTDJINjI3VnNqNWJmbm81U1JOSS8KVHdvclJoU3YwR3FkVkdIb2pVWGlmZmdzaWp6Z1NyNUd3R3Y5cVM1c3Fsd3FYc2FUWHNueTVpbWVkNERjdUhHawpacXBYRENic2VsT2h4cTNWSkxRN2VBakxaWXIvUVlBaGpjSFllMHNFNi9FYk90K2lxekVZZnFKTnhldURjTmFsCnZpRDUzZGFlSDNISHBDWkFZbUhWTnhYRWhsTHFBeTd1YmZORERJaW13UG1YbjFZd1I0K0o1R3RGbVNrUW00RkkKM1pidTdmcEZUdlU1VXdJREFRQUJvNElCWURDQ0FWd3dFZ1lEVlIwVEFRSC9CQWd3QmdFQi93SUJBREFPQmdOVgpIUThCQWY4RUJBTUNBUVl3VHdZSUt3WUJCUVVIQVFFRVF6QkJNRDhHQ0NzR0FRVUZCekFDaGpOb2RIUndPaTh2ClFrVk1Sa2xWVTE5UVMwa3VRa1ZNVjBsU1JVUXVUa1ZVTDBKbGJHWnBkWE5mVW05dmRGOURRUzVqY25Rd0h3WUQKVlIwakJCZ3dGb0FVUWRDRlV2QnJKdnRwdmtpRnVmb0UvZzg4MmVnd1h3WURWUjBnQkZnd1ZqQlVCZ3NyQmdFRQpBWUtCQm1VREFUQkZNRU1HQ0NzR0FRVUZCd0lCRmpkb2RIUndPaTh2UWtWTVJrbFZVMTlRUzBrdVFrVk1WMGxTClJVUXVUa1ZVTDBKbGJHWnBkWE5mVW05dmRGOURRVjlEVUZNdWNHUm1NRVFHQTFVZEh3UTlNRHN3T2FBM29EV0cKTTJoMGRIQTZMeTlDUlV4R1NWVlRYMUJMU1M1Q1JVeFhTVkpGUkM1T1JWUXZRbVZzWm1sMWMxOVNiMjkwWDBOQgpMbU55YkRBZEJnTlZIUTRFRmdRVVhUeTYwZVM2YmdweHlsQ3dMeWVGM1hVVWdaY3dEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQUpvSFBUdGwwZ0lCV1huVG9GdjRXbXN0THJwKzV5V2oxdkMrK0syZ1hKckhlV1J4S0RDWDJoWFMKUTF1QnZCWDNTS3MvVi9xWU9sdlVNMDdkR0hsTnBrVXVOYWFkK3B1NUVDQjh6OUVoM2RBbDVCNkUzMmE4UUZ5Rwp5bS9rN2g4Mm1IdU5UYVFZT09LVmExVVpYVE92TVRVVk96WjhyMTFwUkdGd3pSY3hPakJWUnIwYmZtZ2ZWdW0yCjVydXY0OFFNS2pWbnVLN014a3JDdnVuOFZkYy9lSk1KRTRVTFEvWkhRYjFrYlhwYTcyM2lobDc2a3BibmhlNmUKMGk3RzdBbXhhdnE0WXB5OWkxb0tMWDIxSWZkRHB6NExpMGlFQlQ4OVQvekg3ZzJBSnpBay9kQTUvdUVXZFprTwpHMFZ6dDJmOGNTZjJJbUlGTUw2bi8yWGZjWkt0SXljQ2ZkaS91dXZteG1jdDMxaUREZVMrOUNPTGx2Vm9jVWRXCmNyOVlITVgxd2FnWnRyR2Y3c0xNb0ZvdlduSnhYOFl2M1JGcUo1VXVONHEzMm82THlwNHNhUDUwQVlBd1I5Y1cKcEluSUVuVm5yZUYxOSs1N2xmUVRIK0kxMlRhVm9PMEh6cEFNTjJuZUVkenI5cTF3L2s1VmN5VFkvdjVBNTJTSgp6T0dkUzVUSUZWOW1CampJTFJNSGhKM2h5UHhWNHJTSzQxMWRES09KaW1pMVFRTnFCV3FJMEE3c1J3RWFrdEVCCnpEWGhROWlvUW41R0FWeSszakZDbmlZWHFMdko1Ylk3Rm5FV01QNmJJKy9yamR5R0lIQ3dDVXpOYldHbnpnaG4KdEV5MDhvZVduY1NocFgwWXBaY1hEQWtweGEvUkt1SmVseVdHK0tBa3RwWmZlTmVyQ0FEbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=='

      - task: KeyVault@1
        displayName: 'pem-is4f-root-ca-service-base64'
        inputs:
          azureSubscription: ${{ variables.azureSubscription }}
          action: 'setSecret'
          keyVaultName: ${{ variables.keyvaultKubernetes }}
          secretName: 'pem-is4f-root-ca-service-base64'
          secretValue: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVGRENDQXZ5Z0F3SUJBZ0lMQkFBQUFBQUJSa0k0MCtrd0RRWUpLb1pJaHZjTkFRRUZCUUF3Y3pFTE1Ba0cKQTFVRUJoTUNRa1V4S1RBbkJnTlZCQW9USUVsdWJtOTJZWFJwZG1VZ1UyOXNkWFJwYjI1eklHWnZjaUJHYVc1aApibU5sTVRrd053WURWUVFERXpCSmJtNXZkbUYwYVhabElGTnZiSFYwYVc5dWN5Qm1iM0lnUm1sdVlXNWpaU0JTCmIyOTBJRU5CSUZObGNuWnBZMlV3SGhjTk1UUXdOVEk0TVRBd01EQXdXaGNOTXprd05USTRNVEF3TURBd1dqQnoKTVFzd0NRWURWUVFHRXdKQ1JURXBNQ2NHQTFVRUNoTWdTVzV1YjNaaGRHbDJaU0JUYjJ4MWRHbHZibk1nWm05eQpJRVpwYm1GdVkyVXhPVEEzQmdOVkJBTVRNRWx1Ym05MllYUnBkbVVnVTI5c2RYUnBiMjV6SUdadmNpQkdhVzVoCmJtTmxJRkp2YjNRZ1EwRWdVMlZ5ZG1salpUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFOd0JSL05sa2pQZ0ZaU1RWWWErRGExajFzT2M1WEZWK2RCMVNYakp4RndlcGlZNVF5cWZwUGJJNkgreQpGOTlCNGJtSUlBM25VU2ZuRlBob2ovZkdHZDNEZTdmTU5zeUlRWHNNUjJTVllBaFlnTkFIYmswRi9qZ3lSOXd5CkdDU3hiNVRCSjg0Q3NzZ3JndUdwSDUvSmhuWGtwL3NTOVh2QXJsM3hqL0RPMWtFcDFQbDF1YU82QlFFU29YdlYKQ3hmdkZhUkk0dXI3aGk3T2kzd2pDajhXMTcydHlsN216c3lZaHN5ZzRvVksyR1BIT3Uwci93T1gzaXBsQ2VWVgordGpHN2xIbUZNZU1kcWRpcW5sQVNUaXJtanpTTnFEdzJiM1JMZzk4YnBLSWtKSjRsTS9lQkRMWVBCN0QwWlkwCnBBNTc0Mll6aW1TZlJQcUdpTW5yamR0RTJCRUNBd0VBQWFPQnFEQ0JwVEFPQmdOVkhROEJBZjhFQkFNQ0FRWXcKRWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQVRBZEJnTlZIUTRFRmdRVVN3bkZnMk81UFZSY0cyQ2lLUGthYlEvNApIeHd3WUFZRFZSMGdCRmt3VnpCVkJnMHJCZ0VFQWI5aUFRTUNDZ0VBTUVRd1FnWUlLd1lCQlFVSEFnSXdOaG8wCmFIUjBjSE02THk5eWIyOTBMa2xUTkVad2EybHpaWEoyYVdObGN5NWpiMjB2U1ZNMFJsOVNiMjkwUTBGZlExQlQKTG5Ca1pqQU5CZ2txaGtpRzl3MEJBUVVGQUFPQ0FRRUF6TzRaSFVXcm4xck9zZ0JmM1ZUOFVVNDlRWWJaZ3AxcQpvZFIzR3hOdFF4YlEyQVlmRmlhTm5oQk00K3B0OXRhNmhBbGRrczdhNlhVcWEvSWFPWElrSWdCU2FZQitNYkNuCjNHUk1ocTEwZTZPdncxOUJhZTBkU3FFQk56S2N1dVdnUDVvb3p1SkFpUkF3ODR6QTYzQmZPMHNNd2RkUFVWOHIKdmVJbmt4RkFiQko1a004RXJCVjd5UkRNbXdycXpRaVc2cXVJN1Y5b0I4bXcxN0gyRGl3UHlTejBQcGNyUnRQTApWVG9SWjlyVTNianZnSkhNeEtOOVBYNFNHZ2txbmorRTVpWHArTG5sU1I5V2NnMlhSRU1WNW9TTTV3R3Z1ZTE5CjBENTZmU1dRTTFJYjBWR21sOEhvOTBkN2VyRnV0alowVE5pZzdSeW1LRm5NSXlNcTRKM3ZkZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0='

      - task: KeyVault@1
        displayName: Set ${{ parameters.certificateName }}
        inputs:
          azureSubscription: ${{ variables.azureSubscription }}
          action: 'setSecret'
          keyVaultName: ${{ variables.keyvaultKubernetes }}
          secretName: ${{ parameters.certificateName }}
          secretValue: $(certBase64)

      - task: KeyVault@1
        displayName: Set ${{ parameters.keyName }}
        inputs:
          azureSubscription: ${{ variables.azureSubscription }}
          action: 'setSecret'
          keyVaultName: ${{ variables.keyvaultKubernetes }}
          secretName: ${{ parameters.keyName }}
          secretValue: $(keyBase64)